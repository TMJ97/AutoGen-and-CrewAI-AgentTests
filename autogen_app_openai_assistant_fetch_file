#https://github.com/microsoft/autogen/blob/main/notebook/agentchat_oai_code_interpreter.ipynb
#Auto Generated Agent Chat: GPTAssistant with Code Interpreter
#https://www.youtube.com/watch?v=haDtYk7pz0c


import io
import os
from dotenv import load_dotenv

from IPython.display import display
from PIL import Image

import autogen
from autogen.agentchat import AssistantAgent, UserProxyAgent
from autogen.agentchat.contrib.gpt_assistant_agent import GPTAssistantAgent

from openai import OpenAI

load_dotenv() #.env file might not be in use...
openai_api_key = os.getenv("OPENAI_API_KEY")
model_name = "gpt-3.5-turbo-0125"
temp = 0

# config_list = autogen.config_list_from_json(
#     "OAI_CONFIG_LIST",
#     file_location=".",
#     filter_dict={
#         "model": ["gpt-3.5-turbo", "gpt-35-turbo", "gpt-4", "gpt4", "gpt-4-32k", "gpt-4-turbo"],
#     },
# )

# When using a single openai endpoint, you can use the following:
config_list = [{"model": model_name, "api_key": openai_api_key}]
client = OpenAI()

#Upload file to the assistant
file = client.files.create(
    file=open("Financial-Sample-Much-Shortened.csv", "rb"),
    purpose='assistants'
)

# Get an agent equipped with code interpreter. It creates a new agent if an identical one is not found.
gpt_assistant = GPTAssistantAgent(
    name="Coder Assistant",
    llm_config={
        "config_list": config_list,
    },
    assistant_config={
        "tools": [{"type": "code_interpreter"}],
        "code_interpreter": {
            "file_ids": [file.id]
        }
    },
    instructions="You are an expert at writing python code to solve problems. Reply TERMINATE when the task is solved and there is no problem.",
)

api_response = gpt_assistant.openai_client.files.with_raw_response.retrieve_content(
    "file-sXXzgHTNwtbniiZcauVgZUIQP"
)

if api_response.status_code == 200:
    content = api_response.content
    if (content.type == "image file"):
        image_data_bytes = io.BytesIO(content)
        image = Image.open(image_data_bytes)
        display(image)
        with open("./my-image.png", "wb") as file:
            file.write(image_data_bytes)
    else:
        file_content = content.read()
        with open(("./my-file.csv"), "wb") as file:
            file.write(file_content)
        

#gpt_assistant.delete_assistant()